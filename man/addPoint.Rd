% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/addPoint.R
\name{addPoint}
\alias{addPoint}
\title{Add a Point to an Existing Configuration}
\usage{
addPoint(point, treebinr_obj, binMeasure, makePoint, inputs)
}
\arguments{
\item{point}{A vector containing the point to be added to the binned configuration}

\item{treebinr_obj}{An object of class treebinr}

\item{binMeasure}{A user supplied function to compute the measure associated with each bin}

\item{makePoint}{A user supplied function to turn the contents of a bin into a single point}

\item{inputs}{A list containing additional input parameters required by user supplied functions. Default is NULL.}
}
\value{
The return value is an object of class treebinr, which contains the following 
\item{points}{A matrix containing the reduced point configuration}
\item{counts}{A vector containing the number of points in each bin}
\item{bins}{A list containing bin objects, which detail the contents of each bin}
\item{tree}{An undirected graph object for the binning tree}
}
\description{
\code{addPoint} adds a point to an existing binned configuration by first finding the bin to which it belongs, and updating the target bin
}
\examples{
#Bin a Normal Configuration to 500 Points
set.seed(1337)
X <- matrix(rnorm(2000),ncol=2)

numbins <- 500
nCols <- ncol(X)
binMeasure <- gapMeasure
selectBin <- gapSelect
splitBin <- gapSplit
boundaryTest <- gapBoundaryTest
makePoint <- gapPoints

inputs <- list(dimRange = sapply(1:nCols, FUN = function(j) {range(X[,j])}), tau=1)
binInfo <- list(binRange = sapply(1:nCols, FUN = function(j) {range(X[,j])}))

treebinr_obj <- treebin(X, numbins, binMeasure, boundaryTest, selectBin, splitBin, makePoint, binInfo, inputs)

#Add a Point at (-3,3)
point <- c(-3,3)
out2 <- addPoint(point, treebinr_obj, binMeasure, makePoint, inputs)

}
